#!/bin/bash

# Аргументы: $1=user $2=domain $3=title $4=admin_user $5=admin_pass $6=admin_email
USER=$1
DOMAIN=$2
TITLE=$3
ADMIN_USER=$4
ADMIN_PASS=$5
ADMIN_EMAIL=$6

# Проверка аргументов
if [ -z "$USER" ] || [ -z "$DOMAIN" ] || [ -z "$TITLE" ] || [ -z "$ADMIN_USER" ] || [ -z "$ADMIN_PASS" ] || [ -z "$ADMIN_EMAIL" ]; then
    echo "Error: Missing required arguments"
    echo "Usage: $0 <user> <domain> <title> <admin_user> <admin_pass> <admin_email>"
    exit 1
fi

# Пути и переменные БД
WEB_PATH="/home/$USER/web/$DOMAIN/public_html"

# Создаем безопасное имя для БД из домена (убираем точки и спецсимволы, ограничиваем длину)
DB_SAFE_NAME=$(echo "$DOMAIN" | sed 's/[^a-zA-Z0-9]/_/g' | cut -c1-20)
DB_NAME="${DB_SAFE_NAME}_wp"

# Создаем короткое уникальное имя пользователя
DOMAIN_HASH=$(echo "$DOMAIN" | md5sum | cut -c1-8)
DB_USER="wp_${DOMAIN_HASH}"

# Убеждаемся, что имя пользователя не превышает 32 символа
if [ ${#DB_USER} -gt 32 ]; then
    DB_USER="wp_$(openssl rand -hex 4)"
fi

# Генерируем отдельный пароль для БД
DB_PASS=$(openssl rand -base64 16 | tr -d '/+=' | cut -c1-12)

# Логирование
LOG_FILE="/var/log/hestia/wp-install.log"

# Функция для выполнения Hestia команд
execute_hestia_cmd() {
    local cmd="$1"
    shift
    /usr/local/hestia/bin/"$cmd" "$@" 2>&1
    return $?
}

# Функция для выполнения MySQL команд
execute_mysql() {
    local query="$1"
    if [ -f "/etc/mysql/debian.cnf" ]; then
        mysql --defaults-file=/etc/mysql/debian.cnf -e "$query" 2>/dev/null
    elif [ -n "$MYSQL_ROOT_PASSWORD" ]; then
        mysql -u root -p"$MYSQL_ROOT_PASSWORD" -e "$query" 2>/dev/null
    else
        mysql -u root -e "$query" 2>/dev/null
    fi
    return $?
}

# Функция для генерации случайного пароля
generate_password() {
    local length=${1:-16}
    openssl rand -base64 32 | tr -d '/+=' | cut -c1-$length
}

# Проверяем, существует ли пользователь Hestia
USER_EXISTS=false
if execute_hestia_cmd v-list-user "$USER" json >/dev/null 2>&1; then
    USER_EXISTS=true
    echo "User $USER already exists" >> "$LOG_FILE"
else
    echo "User $USER does not exist, creating..." >> "$LOG_FILE"
    
    # Создаем пользователя Hestia
    USER_PASSWORD=$(generate_password 16)
    USER_EMAIL="admin@$DOMAIN"
    
    # Пытаемся создать пользователя
    CREATE_USER_RESULT=$(execute_hestia_cmd v-add-user "$USER" "$USER_PASSWORD" "$USER_EMAIL" "default" "$USER")
    if [ $? -ne 0 ]; then
        echo "Error: Failed to create user $USER: $CREATE_USER_RESULT"
        exit 1
    fi
    
    echo "User $USER created successfully" >> "$LOG_FILE"
    USER_EXISTS=true
fi

# Проверяем, что пользователь теперь существует
if [ "$USER_EXISTS" = false ]; then
    echo "Error: User $USER still does not exist after creation attempt"
    exit 1
fi

# Проверяем, существует ли домен у какого-либо пользователя
EXISTING_USER=""
USERS_LIST=$(execute_hestia_cmd v-list-users json | jq -r 'keys[]' 2>/dev/null)

for existing_user in $USERS_LIST; do
    if [ -n "$existing_user" ]; then
        # Проверяем домен у пользователя
        DOMAIN_CHECK=$(execute_hestia_cmd v-list-web-domain "$existing_user" "$DOMAIN" json 2>/dev/null)
        if [ $? -eq 0 ] && [ -n "$DOMAIN_CHECK" ]; then
            EXISTING_USER="$existing_user"
            break
        fi
    fi
done

# Если домен найден у другого пользователя, удаляем его
if [ -n "$EXISTING_USER" ]; then
    echo "Domain $DOMAIN found at user $EXISTING_USER, removing..." >> "$LOG_FILE"
    
    # Удаляем web домен
    execute_hestia_cmd v-delete-web-domain "$EXISTING_USER" "$DOMAIN" >/dev/null 2>&1

    # Удаляем DNS зону если существует
    execute_hestia_cmd v-delete-dns-domain "$EXISTING_USER" "$DOMAIN" >/dev/null 2>&1

    # Удаляем mail домен если существует
    execute_hestia_cmd v-delete-mail-domain "$EXISTING_USER" "$DOMAIN" >/dev/null 2>&1

    # Удаляем базу данных если существует
    execute_hestia_cmd v-delete-database "$EXISTING_USER" "$DB_NAME" >/dev/null 2>&1

    sleep 2 # Ждем завершения удаления
fi

# Создаем домен БЕЗ DNS и email
echo "Creating domain $DOMAIN for user $USER..." >> "$LOG_FILE"
CREATE_RESULT=$(execute_hestia_cmd v-add-web-domain "$USER" "$DOMAIN")
if [ $? -ne 0 ]; then
    echo "Error: Failed to create domain: $CREATE_RESULT"
    exit 1
fi

# Устанавливаем прокси-шаблон tc-nginx-only
echo "Setting proxy template tc-nginx-only for domain $DOMAIN..." >> "$LOG_FILE"
PROXY_RESULT=$(execute_hestia_cmd v-change-web-domain-proxy-tpl "$USER" "$DOMAIN" "tc-nginx-only")
if [ $? -ne 0 ]; then
    echo "Warning: Failed to set proxy template tc-nginx-only: $PROXY_RESULT" >> "$LOG_FILE"
    echo "Warning: Continuing without proxy template..." >> "$LOG_FILE"
else
    echo "Proxy template tc-nginx-only set successfully" >> "$LOG_FILE"
fi

# Проверяем создание директории
WEB_PATH="/home/$USER/web/$DOMAIN/public_html"
if [ ! -d "$WEB_PATH" ]; then
    echo "Error: Directory not found: $WEB_PATH"
    exit 1
fi

# Проверка, установлен ли WP CLI
if ! command -v wp &> /dev/null; then
    echo "Error: WP CLI not found"
    exit 1
fi

# Переходим в директорию
cd "$WEB_PATH" || { echo "Error: Cannot change to $WEB_PATH"; exit 1; }

# Удаляем все файлы в директории (включая существующий WordPress если есть)
echo "Cleaning directory $WEB_PATH..." >> "$LOG_FILE"
rm -rf "$WEB_PATH"/*
rm -rf "$WEB_PATH"/.*  2>/dev/null || true

# Удаляем существующую БД через HestiaCP если есть
echo "Cleaning existing database $DB_NAME..." >> "$LOG_FILE"
execute_hestia_cmd v-delete-database "$USER" "$DB_NAME" >/dev/null 2>&1

# Создание базы данных через HestiaCP
echo "Creating database $DB_NAME via HestiaCP..." >> "$LOG_FILE"
echo "Domain: $DOMAIN" >> "$LOG_FILE"
echo "DB Name: $DB_NAME (length: ${#DB_NAME})" >> "$LOG_FILE"
echo "DB User: $DB_USER (length: ${#DB_USER})" >> "$LOG_FILE"
echo "DB Pass: [HIDDEN] (length: ${#DB_PASS})" >> "$LOG_FILE"

# Проверяем длину имени пользователя БД
if [ ${#DB_USER} -gt 32 ]; then
    echo "Error: Database username too long (${#DB_USER} chars): $DB_USER"
    echo "Error: Database username too long (${#DB_USER} chars): $DB_USER" >> "$LOG_FILE"
    exit 1
fi

# Проверяем длину имени БД
if [ ${#DB_NAME} -gt 64 ]; then
    echo "Error: Database name too long (${#DB_NAME} chars): $DB_NAME"
    echo "Error: Database name too long (${#DB_NAME} chars): $DB_NAME" >> "$LOG_FILE"
    exit 1
fi

echo "Executing: v-add-database $USER $DB_NAME $DB_USER [PASSWORD] mysql" >> "$LOG_FILE"
DB_CREATE_RESULT=$(execute_hestia_cmd v-add-database "$USER" "$DB_NAME" "$DB_USER" "$DB_PASS" "mysql")
if [ $? -ne 0 ]; then
    echo "Error: Failed to create database via HestiaCP: $DB_CREATE_RESULT"
    echo "Error: Failed to create database via HestiaCP: $DB_CREATE_RESULT" >> "$LOG_FILE"
    exit 1
fi

echo "Database $DB_NAME created successfully via HestiaCP" >> "$LOG_FILE"

# Скачивание WordPress
echo "Downloading WordPress..." >> "$LOG_FILE"
sudo -u "$USER" wp core download --allow-root >/dev/null 2>&1 || {
    echo "Error: Failed to download WordPress"
    # Очистка БД при ошибке
    execute_hestia_cmd v-delete-database "$USER" "$DB_NAME" >/dev/null 2>&1
    exit 1
}

# Создание конфига
echo "Creating wp-config.php..." >> "$LOG_FILE"
sudo -u "$USER" wp config create \
    --dbname="$DB_NAME" \
    --dbuser="$DB_USER" \
    --dbpass="$DB_PASS" \
    --dbhost="localhost" \
    --dbprefix="wp_" \
    --allow-root >/dev/null 2>&1 || {
    echo "Error: Failed to create wp-config.php"
    # Очистка при ошибке
    rm -rf "$WEB_PATH"/*
    execute_hestia_cmd v-delete-database "$USER" "$DB_NAME" >/dev/null 2>&1
    exit 1
}

# Добавляем дополнительные настройки в wp-config.php
sudo -u "$USER" wp config set WP_DEBUG false --raw --allow-root >/dev/null 2>&1
sudo -u "$USER" wp config set WP_DEBUG_LOG false --raw --allow-root >/dev/null 2>&1
sudo -u "$USER" wp config set WP_DEBUG_DISPLAY false --raw --allow-root >/dev/null 2>&1
sudo -u "$USER" wp config set DISALLOW_FILE_EDIT true --raw --allow-root >/dev/null 2>&1
sudo -u "$USER" wp config set AUTOMATIC_UPDATER_DISABLED true --raw --allow-root >/dev/null 2>&1


# Добавляем поддержку HTTPS через прокси
sudo -u "$USER" sed -i '/\/\* That'"'"'s all, stop editing!/i\
\
// HTTPS за прокси (например, CloudFlare)\
if (isset($_SERVER['\''HTTP_X_FORWARDED_PROTO'\'']) && $_SERVER['\''HTTP_X_FORWARDED_PROTO'\''] == '\''https'\'') {\
    $_SERVER['\''HTTPS'\''] = '\''on'\'';\
}' "$WEB_PATH/wp-config.php"

# Установка WordPress
echo "Installing WordPress..." >> "$LOG_FILE"
sudo -u "$USER" wp core install \
    --url="https://$DOMAIN" \
    --title="$TITLE" \
    --admin_user="$ADMIN_USER" \
    --admin_password="$ADMIN_PASS" \
    --admin_email="$ADMIN_EMAIL" \
    --skip-email \
    --allow-root >/dev/null 2>&1 || {
    echo "Error: Failed to install WordPress"
    # Очистка при ошибке
    rm -rf "$WEB_PATH"/*
    execute_hestia_cmd v-delete-database "$USER" "$DB_NAME" >/dev/null 2>&1
    exit 1
}

# Установка базовых настроек
echo "Configuring WordPress settings..." >> "$LOG_FILE"
sudo -u "$USER" wp option update timezone_string 'Europe/Kiev' --allow-root >/dev/null 2>&1
sudo -u "$USER" wp option update date_format 'd.m.Y' --allow-root >/dev/null 2>&1
sudo -u "$USER" wp option update time_format 'H:i' --allow-root >/dev/null 2>&1

# Устанавливаем структуру постоянных ссылок на "Post name" (/%postname%/)
echo "Setting permalink structure to Post name..." >> "$LOG_FILE"
sudo -u "$USER" wp rewrite structure '/%postname%/' --allow-root >/dev/null 2>&1
sudo -u "$USER" wp rewrite flush --allow-root >/dev/null 2>&1

# Удаление демо-контента
sudo -u "$USER" wp post delete 1 --force --allow-root >/dev/null 2>&1
sudo -u "$USER" wp post delete 2 --force --allow-root >/dev/null 2>&1
sudo -u "$USER" wp comment delete 1 --force --allow-root >/dev/null 2>&1

# Получаем активную тему
ACTIVE_THEME=$(sudo -u "$USER" wp theme status --allow-root | grep "Active:" | awk '{print $2}' 2>/dev/null)
echo "Active theme: $ACTIVE_THEME" >> "$LOG_FILE"

# Удаляем все неактивные темы
echo "Removing inactive themes..." >> "$LOG_FILE"
INSTALLED_THEMES=$(sudo -u "$USER" wp theme list --status=inactive --field=name --allow-root 2>/dev/null)
if [ -n "$INSTALLED_THEMES" ]; then
    for theme in $INSTALLED_THEMES; do
        if [ "$theme" != "$ACTIVE_THEME" ]; then
            echo "Deleting theme: $theme" >> "$LOG_FILE"
            sudo -u "$USER" wp theme delete "$theme" --allow-root >/dev/null 2>&1
        fi
    done
else
    echo "No inactive themes found" >> "$LOG_FILE"
fi

# Удаляем все плагины
echo "Removing all plugins..." >> "$LOG_FILE"
INSTALLED_PLUGINS=$(sudo -u "$USER" wp plugin list --field=name --allow-root 2>/dev/null)
if [ -n "$INSTALLED_PLUGINS" ]; then
    for plugin in $INSTALLED_PLUGINS; do
        echo "Deleting plugin: $plugin" >> "$LOG_FILE"
        sudo -u "$USER" wp plugin deactivate "$plugin" --allow-root >/dev/null 2>&1
        sudo -u "$USER" wp plugin delete "$plugin" --allow-root >/dev/null 2>&1
    done
else
    echo "No plugins found" >> "$LOG_FILE"
fi

# Очистка транзиентов и кешей после удаления
sudo -u "$USER" wp transient delete --all --allow-root >/dev/null 2>&1
sudo -u "$USER" wp cache flush --allow-root >/dev/null 2>&1

# Копирование кастомных плагинов
CUSTOM_PLUGINS_SOURCE="/root/schemas/wp/plugins"
PLUGINS_DESTINATION="/home/$USER/web/$DOMAIN/public_html/wp-content/plugins"

if [ -d "$CUSTOM_PLUGINS_SOURCE" ]; then
    echo "Copying custom plugins from $CUSTOM_PLUGINS_SOURCE..." >> "$LOG_FILE"
    
    # Копируем все содержимое папки с плагинами
    cp -r "$CUSTOM_PLUGINS_SOURCE"/* "$PLUGINS_DESTINATION/" 2>/dev/null
    
    if [ $? -eq 0 ]; then
        echo "Custom plugins copied successfully" >> "$LOG_FILE"
        
        # Устанавливаем правильные права на скопированные плагины
        chown -R "$USER":"$USER" "$PLUGINS_DESTINATION"
        find "$PLUGINS_DESTINATION" -type d -exec chmod 755 {} \;
        find "$PLUGINS_DESTINATION" -type f -exec chmod 644 {} \;
        
        # Активируем плагин plugin-downloader если он есть
        if [ -d "$PLUGINS_DESTINATION/plugin-downloader" ]; then
            echo "Activating plugin-downloader..." >> "$LOG_FILE"
            sudo -u "$USER" wp plugin activate plugin-downloader --allow-root >/dev/null 2>&1
            if [ $? -eq 0 ]; then
                echo "Plugin plugin-downloader activated successfully" >> "$LOG_FILE"
            else
                echo "Failed to activate plugin-downloader" >> "$LOG_FILE"
            fi
        fi
        
        # Активируем все другие плагины из скопированной папки
        for plugin_dir in "$PLUGINS_DESTINATION"/*; do
            if [ -d "$plugin_dir" ]; then
                plugin_name=$(basename "$plugin_dir")
                if [ "$plugin_name" != "plugin-downloader" ]; then
                    echo "Activating plugin: $plugin_name" >> "$LOG_FILE"
                    sudo -u "$USER" wp plugin activate "$plugin_name" --allow-root >/dev/null 2>&1
                fi
            fi
        done
        
    else
        echo "Failed to copy custom plugins" >> "$LOG_FILE"
    fi
else
    echo "Custom plugins directory not found at $CUSTOM_PLUGINS_SOURCE" >> "$LOG_FILE"
fi

# Установка прав доступа
echo "Setting file permissions..." >> "$LOG_FILE"
chown -R "$USER":"$USER" "$WEB_PATH"
find "$WEB_PATH" -type d -exec chmod 755 {} \;
find "$WEB_PATH" -type f -exec chmod 644 {} \;
chmod 600 "$WEB_PATH/wp-config.php"

# Финальная проверка установки
if [ ! -f "wp-config.php" ]; then
    echo "Error: wp-config.php not found after installation"
    exit 1
fi

if [ ! -d "wp-admin" ]; then
    echo "Error: wp-admin directory not found"
    exit 1
fi

echo "WordPress installation completed successfully for $DOMAIN" >> "$LOG_FILE"

# Формируем результат
if [ -n "$EXISTING_USER" ]; then
    echo "RECREATED_FROM:$EXISTING_USER:OK"
else
    echo "OK"
fi
exit 0